
Parameters:
  BitcoinUrl:
    Type: String
    Description: url to grab bitcoin exchange rate data from

  APIGStage:
    Type: String
    Description: stage name e.g. demo_deploy


Resources:

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: updatedISO
          AttributeType: S
      KeySchema:
        - AttributeName: updatedISO
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName:
        !Join [ "-", [ !Ref "AWS::StackName", BitcoinExchangeRate ] ]
      StreamSpecification:
        StreamViewType: NEW_IMAGE


  LambdaConsumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - dynamodb:PutItem
                Resource:
                  !Join [ "", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTable  ] ]

  # EventsRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Principal:
  #             Service:
  #               - "events.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #     Path: "/"
  #     Policies:
  #       -
  #         PolicyName: "inline-policy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             -
  #               Effect: "Allow"
  #               Action:
  #                 - lambda:InvokeFunction
  #               Resource:
  #                 !GetAtt LambdaGenerate.Arn


  APIGExecuteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  !GetAtt LambdaConsume.Arn


  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        !GetAtt LambdaGenerate.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"


  LambdaConsume:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Description: consumes bitcoint data and puts in dynamodb
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", Consume ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaConsumeRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          dynamodb_table: !Ref DynamoDBTable

  LambdaGenerate:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Description: hits APIG consumer with bitcoin exchange rate data
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", Generate ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaConsumeRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          bitcoin_url: !Ref BitcoinUrl
          apig_id: !Ref APIGateway
          apig_stage: !Ref APIGStage
          region: !Ref "AWS::Region"



  APIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        !Join [ "_", [ !Ref "AWS::StackName", APIG ] ]


  APIGConsumeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !GetAtt APIGateway.RootResourceId
      PathPart: consume
      RestApiId: !Ref APIGateway


  MethodConsumeResourceAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.id: true
      ResourceId:
        !Ref APIGConsumeResource
      RestApiId:
        !Ref APIGateway
      Integration:
        Credentials:
          !GetAtt APIGExecuteLambdaRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
              - LambdaConsume
              - Arn


  APIGDeploymentDemo:
    DependsOn:
      - MethodConsumeResourceAny
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        !Ref APIGateway
      StageName: !Ref APIGStage


  TriggerGenerateFunction:
    Type: "AWS::Events::Rule"
    Properties:
      Description: periodically hits lambda function to get bitcoin exchange data and send to APIG
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt LambdaGenerate.Arn
          Id: lambdaConsume
