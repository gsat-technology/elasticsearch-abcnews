
Parameters:
  AbcRssFeed:
    Type: String
    Description: url of abc rss feed (e.g. http://www.abc.net.au/news/feed/51120/rss.xml)

  APIGStage:
    Type: String
    Description: stage name e.g. demo_deploy


Resources:

  DynamoDBTableNewsItems:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref "AWS::StackName"
      StreamSpecification:
        StreamViewType: NEW_IMAGE


  LambdaConsumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  !Sub
                    - arn:aws:s3:::${bucket}/*
                    - { bucket: !Ref S3LatestRecord }
              -
                Effect: "Allow"
                Action:
                  - dynamodb:PutItem
                Resource:
                  !Join [ "", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTableNewsItems  ] ]

  LambdaESRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - es:ESHttpPost
                Resource: "arn:aws:es:*:*:*"

  APIGExecuteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  !GetAtt LambdaConsume.Arn


  LambdaPermissionCWEvents:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        !GetAtt LambdaGenerate.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  LambdaPermissionCWLogs:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !GetAtt LambdaLogsToElasticache.Arn
      Principal: logs.ap-southeast-2.amazonaws.com


  LambdaConsume:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Description: consumes abc news data and puts in dynamodb
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", Consume ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaConsumeRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          dynamodb_table: !Ref DynamoDBTableNewsItems
          s3_latest_record: !Ref S3LatestRecord


  LambdaGenerate:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Description: hits APIG consumer with abc news data
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", Generate ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaConsumeRole.Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          abc_rss_feed: !Ref AbcRssFeed
          apig_id: !Ref APIGateway
          apig_stage: !Ref APIGStage
          region: !Ref "AWS::Region"
          s3_latest_record_bucket: !Ref S3LatestRecord

  LambdaLogsToElasticache:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            // TODO implement
            callback(null, 'Hello from Lambda');
          };
      Description: streams data from cw logs to elasticsearch
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", LogsToElasticsearch ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaESRole.Arn
      Runtime: nodejs4.3
      Timeout: 60
      Environment:
        Variables:
          es_endpoint: !GetAtt ES.DomainEndpoint
          index_name: abc_news

  APIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        !Join [ "_", [ !Ref "AWS::StackName", APIG ] ]


  APIGConsumeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !GetAtt APIGateway.RootResourceId
      PathPart: consume
      RestApiId: !Ref APIGateway


  MethodConsumeResourceAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.id: true
      ResourceId:
        !Ref APIGConsumeResource
      RestApiId:
        !Ref APIGateway
      Integration:
        Credentials:
          !GetAtt APIGExecuteLambdaRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
              - LambdaConsume
              - Arn


  APIGDeploymentDemo:
    DependsOn:
      - MethodConsumeResourceAny
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        !Ref APIGateway
      StageName: !Ref APIGStage


  TriggerGenerateFunction:
    Type: "AWS::Events::Rule"
    Properties:
      Description: periodically hits lambda function to get bitcoin exchange data and send to APIG
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt LambdaGenerate.Arn
          Id: lambdaConsume

  #the reason for the below resource is that i need to create a LogGroup with the same
  #name that Lambda will automatically create for the function's log.
  #this is because the below resource 'LogStreamToES' needs this log group to
  #exist (this can't be done with another dependency on the lambda function because
  #the log group for the lambda function is only created after the first invocation)

  LogGroupLambdaConsume:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join [ "", [ "/aws/lambda/", !Ref "AWS::StackName", "_Consume"  ] ]
      RetentionInDays: 1


  LogStreamToES:
   DependsOn:
     - LogGroupLambdaConsume
     - LambdaPermissionCWLogs
   Type: "AWS::Logs::SubscriptionFilter"
   Properties:
     DestinationArn: !GetAtt LambdaLogsToElasticache.Arn
     FilterPattern: "{ $.logstream_identifier = abc_news_data }"
     LogGroupName: !Join [ "", [ "/aws/lambda/", !Ref "AWS::StackName", "_Consume"  ] ]
     #RoleArn: !GetAtt LambdaESRole.Arn


  ES:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Join [ "", [ "arn:aws:es:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":domain/", !Ref "AWS::StackName"  ] ]
            Condition:
              IpAddress:
                aws:SourceIp:
                  - 118.208.221.205
      DomainName: !Ref AWS::StackName
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 20
        VolumeType: "gp2"
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: t2.micro.elasticsearch

  S3LatestRecord:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete

Outputs:
  APIGConsumerEndpoint:
    Description: APIG endpoint to POST news data to
    Value:
      !Sub
        - https://${apig_id}.execute-api.${region}.amazonaws.com/${stage}/consume
        - { apig_id: !Ref APIGateway, region: !Ref "AWS::Region", stage: $Ref APIGStage }
